#!/usr/bin/env python
PACKAGE = "dynamixel_controller"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# VICON room
gen.add("bool_vicon", bool_t, 0, "Start publishing commands calculated from VICON",False)

# Traking the wand as the tip position
gen.add("bool_tip", bool_t, 0, "Wand position as tip position",False)
# Input the base position
gen.add("point_x_b", double_t, 0, "The x coordiate of the base position",    0.15, 0,   2)
gen.add("point_y_b", double_t, 0, "The y coordiate of the base position",    0.25, 0,   2)
gen.add("point_z_b", double_t, 0, "The z coordiate of the base position",    0.15, 0,   2)


#  Moving base position and tip staying at a fixed position
gen.add("bool_base", bool_t, 0, "Input fixed base position",False)
# Input desired tip position
gen.add("point_x_t", double_t, 0, "The x coordiate of the tip position",    0.74, 0,   3)
gen.add("point_y_t", double_t, 0, "The y coordiate of the tip position",    0.639, 0,   3)
gen.add("point_z_t", double_t, 0, "The z coordiate of the tip position",    0.784, 0,   2)

# Forward Kin
gen.add("double_param_1", double_t, 0, "A double parameter to send to actuator 1",    0, -90,   90)
gen.add("double_param_2", double_t, 0, "A double parameter to send to actuator 2",    0, -180,   180)
gen.add("double_param_3", double_t, 0, "A double parameter to send to actuator 3",    0, -180,   180)


# Inverse Kin
gen.add("double_point_x", double_t, 0, "The x coordiate of the goal position",    0.6, 0,   1)
gen.add("double_point_y", double_t, 0, "The y coordiate of the goal position",    0.6, 0,   1)
gen.add("double_point_z", double_t, 0, "The z coordiate of the goal position",    0.3, 0,   1)

# Inverse Kin initial angle
gen.add("double_angle_init_3", double_t, 0, "The initial angle for actuator 3",    5, -90,   90)
gen.add("double_angle_init_2", double_t, 0, "The initial angle for actuator 2",    -30, -180,   180)
gen.add("double_angle_init_1", double_t, 0, "The initial angle for actuator 1",    100, -180,   180)




# Trajectory
gen.add("bool_traj", bool_t, 0, "Joint commands for a Trajectory",False)

# Forward Kinematics
gen.add("bool_fk", bool_t, 0, "Joint commands from forward kinematics",False)

# Inverse Kinematics
gen.add("bool_ik", bool_t, 0, "Joint commands from inverse kinematics",False)

# Homeing State
gen.add("bool_home", bool_t, 0, "Joint commands to the homeing state",False)

gen.add("bool_testbenchsettings", bool_t, 0, "Testbench iteration",False)
gen.add("bool_start_positive", bool_t, 0, "Start positive angle increments.",False)
gen.add("bool_start_negative", bool_t, 0, "Start positive angle increments.",False)
gen.add("bool_start_both", bool_t, 0, "Start positive angle increments.",False)

gen.add("double_param_inc", double_t, 0, "A double parameter for the increment size",    0.5, 0,   1.5)

gen.add("max_angle_pos", double_t, 0, "A double parameter for the maximum angle in positive direction",    3, 0,   15)
gen.add("max_angle_neg", double_t, 0, "A double parameter for the maximum angle in negative direction",    -3, -15,   0)

gen.add("max_angle_both_pos", double_t, 0, "A double parameter for the maximum angle in both direction",    5, 0,   15)
gen.add("max_angle_both_neg", double_t, 0, "A double parameter for the minimum angle in both direction",    -5, -15,   0)


exit(gen.generate(PACKAGE, "dynamixel_controller_node", "controller"))
